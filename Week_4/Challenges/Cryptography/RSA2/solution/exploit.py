from Crypto.Util.number import long_to_bytes

e = 2
N = 22583505402760544028661715190005298955828962694406254799949191179869288380128776671809331003127469098438369049373984843027976932987084906901490852375741496848406191959472673203531454596454065725156691992033065873375280482397625200000522467305936184672864892361146792502300266032384450391145041148636942455830600272694048464089257126644734484446192132537837951948013788662386667630383777397905448313509156602842439041537860690598222895268809152566259143040924787295536142225894757260889980773623614077816411406680311027766390828613873573817658469319405946624883696723498834463973771055715492735550636381918870134637091

enc = 33399131586006064919842955725182374011909294208491766283542952448694758616819756240573018760035529130141986965021665501945073896707139534635088019209

""" because of N is very large , the modulus will be inutile , so it's enough to calculate the square root using Newton's method to get the flag """


def int_sqrt(n):
    x = n
    y = (x + 1) // 2
    while y < x:
        x = y
        y = (x + n // x) // 2
    return x


flag = long_to_bytes(int_sqrt(enc)).decode()
print(flag)
